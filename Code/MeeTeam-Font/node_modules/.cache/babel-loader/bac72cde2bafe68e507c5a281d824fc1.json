{"ast":null,"code":"import axios from 'axios';\nimport { MessageBox, Message } from 'element-ui';\nimport store from '@/store'; // import { getToken } from '@/utils/auth'\n// 每次请求携带cookies信息\n// axios.defaults.headers.post['Content-Type']='application/x-www-form-urlencoded'\n// axios.defaults.withCredentials = true\n// create an axios instance\n\nconst service = axios.create({\n  //baseURL: process.env.VUE_APP_BASE_API, // url = base url + request url\n  baseURL: 'https://localhost:5001',\n  //baseURL:'http://106.14.193.8:8090',//这个应该是把后端部署了\n  // withCredentials: true, // send cookies when cross-domain requests\n  timeout: 50000,\n  // request timeout\n  //withCredentials: true//携带cookie\n  async: true,\n  crossDomain: true\n}); //   // request interceptor\n// service.interceptors.request.use(\n//   config => {\n//     // do something before request is sent\n//     if (localStorage.getItem('Authorization')) {\n//       config.headers.Token = localStorage.getItem('Authorization');\n//       console.log('本次request请求传递了token信息')\n//     }\n//     return config;\n//   },\n//   error => {\n//     // do something with request error\n//     console.log(error) // for debug\n//     return Promise.reject(error)\n//   }\n// )\n// // response interceptor\n// service.interceptors.response.use(\n//   /**\n//    * If you want to get http information such as headers or status\n//    * Please return  response => response\n//    */\n//   /**\n//    * Determine the request status by custom code\n//    * Here is just an example\n//    * You can also judge the status by HTTP Status Code\n//    */\n//   response => {\n//     const res = response.data\n//     console.log('真实的回复为：',response)\n//     // if the custom code is not 200, it is judged as an error.\n//     if (res.errorCode != 200) {\n//       //判断token是否失效\n//       if(res.errorCode==400){\n//         //清除当前token信息\n//         store.commit('delLogin');\n//         //打开登录界面\n//         startLogin()\n//         //前往首页\n//         //this.$router.replace('/');\n//         Message({\n//           message: '您尚未登录，请先登录',\n//           type: 'error',\n//           duration: 5 * 1000\n//         })\n//         return Promise.reject(new Error('您尚未登录'||'Error'))\n//       }\n//       return Promise.reject(new Error(res.msg || 'Error'))\n//     } else {\n//       return res\n//     }\n//   },\n//   error => {\n//     console.log('www') // for debug\n//     return Promise.reject(error)\n//   }\n// )\n//暴露出去\n\nexport default service;","map":{"version":3,"names":["axios","MessageBox","Message","store","service","create","baseURL","timeout","async","crossDomain"],"sources":["C:/Users/中野/Desktop/2020_database_course_design/Code/MeeTeam-Font/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport { MessageBox, Message } from 'element-ui'\r\nimport store from '@/store'\r\n// import { getToken } from '@/utils/auth'\r\n\r\n// 每次请求携带cookies信息\r\n// axios.defaults.headers.post['Content-Type']='application/x-www-form-urlencoded'\r\n// axios.defaults.withCredentials = true\r\n\r\n// create an axios instance\r\nconst service = axios.create({\r\n    //baseURL: process.env.VUE_APP_BASE_API, // url = base url + request url\r\n    baseURL:'https://localhost:5001',\r\n    //baseURL:'http://106.14.193.8:8090',//这个应该是把后端部署了\r\n    // withCredentials: true, // send cookies when cross-domain requests\r\n    timeout: 50000, // request timeout\r\n    //withCredentials: true//携带cookie\r\n    async:true,\r\n    crossDomain:true,\r\n  })\r\n//   // request interceptor\r\n// service.interceptors.request.use(\r\n//   config => {\r\n//     // do something before request is sent\r\n//     if (localStorage.getItem('Authorization')) {\r\n//       config.headers.Token = localStorage.getItem('Authorization');\r\n//       console.log('本次request请求传递了token信息')\r\n//     }\r\n\r\n//     return config;\r\n//   },\r\n//   error => {\r\n//     // do something with request error\r\n//     console.log(error) // for debug\r\n//     return Promise.reject(error)\r\n//   }\r\n// )\r\n\r\n\r\n// // response interceptor\r\n// service.interceptors.response.use(\r\n//   /**\r\n//    * If you want to get http information such as headers or status\r\n//    * Please return  response => response\r\n//    */\r\n\r\n//   /**\r\n//    * Determine the request status by custom code\r\n//    * Here is just an example\r\n//    * You can also judge the status by HTTP Status Code\r\n//    */\r\n//   response => {\r\n//     const res = response.data\r\n//     console.log('真实的回复为：',response)\r\n//     // if the custom code is not 200, it is judged as an error.\r\n//     if (res.errorCode != 200) {\r\n\r\n//       //判断token是否失效\r\n//       if(res.errorCode==400){\r\n//         //清除当前token信息\r\n//         store.commit('delLogin');\r\n//         //打开登录界面\r\n//         startLogin()\r\n//         //前往首页\r\n//         //this.$router.replace('/');\r\n\r\n//         Message({\r\n//           message: '您尚未登录，请先登录',\r\n//           type: 'error',\r\n//           duration: 5 * 1000\r\n//         })\r\n\r\n\r\n//         return Promise.reject(new Error('您尚未登录'||'Error'))\r\n//       }\r\n\r\n//       return Promise.reject(new Error(res.msg || 'Error'))\r\n//     } else {\r\n//       return res\r\n//     }\r\n//   },\r\n//   error => {\r\n//     console.log('www') // for debug\r\n//     return Promise.reject(error)\r\n//   }\r\n\r\n// )\r\n\r\n//暴露出去\r\n  export default service"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,YAApC;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CACA;AAEA;AACA;AACA;AAEA;;AACA,MAAMC,OAAO,GAAGJ,KAAK,CAACK,MAAN,CAAa;EACzB;EACAC,OAAO,EAAC,wBAFiB;EAGzB;EACA;EACAC,OAAO,EAAE,KALgB;EAKT;EAChB;EACAC,KAAK,EAAC,IAPmB;EAQzBC,WAAW,EAAC;AARa,CAAb,CAAhB,C,CAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACE,eAAeL,OAAf"},"metadata":{},"sourceType":"module"}